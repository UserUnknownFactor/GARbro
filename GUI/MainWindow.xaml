<Window x:Class="GARbro.GUI.MainWindow" x:Name="AppWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:GARbro.GUI"
        xmlns:jv="clr-namespace:JustView"
        xmlns:s="clr-namespace:GARbro.GUI.Strings"
        xmlns:p="clr-namespace:GARbro.GUI.Properties"
        Title="GARbro" MinHeight="250" ResizeMode="CanResizeWithGrip"
        Loaded="WindowLoaded"
        KeyDown="WindowKeyDown"
        AllowDrop="True" Drop="OnDropEvent"
        Top="{Binding Source={x:Static p:Settings.Default}, Path=winTop, Mode=TwoWay}"
        Left="{Binding Source={x:Static p:Settings.Default}, Path=winLeft, Mode=TwoWay}"
        Height="{Binding Source={x:Static p:Settings.Default}, Path=winHeight, Mode=TwoWay}"
        Width="{Binding Source={x:Static p:Settings.Default}, Path=winWidth, Mode=TwoWay}"
        WindowState="{Binding Source={x:Static p:Settings.Default}, Path=winState, Mode=TwoWay}">
    <Window.Resources>
        <!-- alternate colors for directory view -->
        <SolidColorBrush x:Key="AlternateColor1" Color="#f2f5f9" />
        <SolidColorBrush x:Key="AlternateColor2" Color="White" />
        <SolidColorBrush x:Key="InactiveInputBackground" Color="#ebf5fe" />

        <!-- directory view internals -->
        <CollectionViewSource x:Key="ListViewSource" Source="{Binding}"/>
        <local:BooleanToCollapsedVisibilityConverter x:Key="booleanToCollapsedVisibilityConverter" />
        <local:EntryTypeConverter x:Key="entryTypeConverter"/>
        <local:SortModeToBooleanConverter x:Key="sortModeToBooleanConverter" />

        <Style x:Key="HeaderLeftAlign" TargetType="{x:Type GridViewColumnHeader}">
            <Setter Property="HorizontalContentAlignment" Value="Left"></Setter>
        </Style>
        <DataTemplate x:Key="SortArrowUp">
            <DockPanel>
                <TextBlock Margin="5,0,5,0" Text="{Binding}" />
                <Path VerticalAlignment="Center" Fill="Gray" Data="M 5,5 15,5 10,0 5,5" />
            </DockPanel>
        </DataTemplate>
        <DataTemplate x:Key="SortArrowDown">
            <DockPanel>
                <TextBlock Margin="5,0,5,0" Text="{Binding}" />
                <Path VerticalAlignment="Center" Fill="Gray" Data="M 5,0 10,5 15,0 5,0" />
            </DockPanel>
        </DataTemplate>
        <DataTemplate x:Key="SortArrowNone">
            <TextBlock Margin="5,0,5,0" Text="{Binding}"/>
        </DataTemplate>

        <Style x:Key="DefaultMenuItemStyle" TargetType="{x:Type MenuItem}">
            <Setter Property="FontWeight" Value="Bold" />
        </Style>

        <!-- Sort-by submenu -->
        <MenuItem x:Key="sortByMenu" Header="{x:Static s:guiStrings.CtxMenuSortBy}">
            <MenuItem Header="{x:Static s:guiStrings.CtxMenuSortByName}" IsCheckable="True"
                      IsChecked="{Binding ElementName=AppWindow, Path=SortMode, Mode=OneWay, Converter={StaticResource sortModeToBooleanConverter}, ConverterParameter=Name}"
                      Command="{x:Static local:Commands.SortBy}" CommandParameter="Name"/>
            <MenuItem Header="{x:Static s:guiStrings.CtxMenuSortByType}" IsCheckable="True"
                      IsChecked="{Binding ElementName=AppWindow, Path=SortMode, Mode=OneWay, Converter={StaticResource sortModeToBooleanConverter}, ConverterParameter=Type}"
                      Command="{x:Static local:Commands.SortBy}" CommandParameter="Type"/>
            <MenuItem Header="{x:Static s:guiStrings.CtxMenuSortBySize}" IsCheckable="True"
                      IsChecked="{Binding ElementName=AppWindow, Path=SortMode, Mode=OneWay, Converter={StaticResource sortModeToBooleanConverter}, ConverterParameter=Size}"
                      Command="{x:Static local:Commands.SortBy}" CommandParameter="Size"/>
            <MenuItem Header="{x:Static s:guiStrings.CtxMenuUnsorted}" IsCheckable="True"
                      IsChecked="{Binding ElementName=AppWindow, Path=SortMode, Mode=OneWay, Converter={StaticResource sortModeToBooleanConverter}}"
                      Command="{x:Static local:Commands.SortBy}"/>
        </MenuItem>
        <!-- Default listview context menu -->
        <ContextMenu x:Key="lvDirContextMenu">
            <MenuItem Header="{x:Static s:guiStrings.CtxMenuOpen}" InputGestureText="Enter"
                      Style="{StaticResource DefaultMenuItemStyle}"
                      Command="{x:Static local:Commands.OpenItem}" />
            <MenuItem Header="{x:Static s:guiStrings.CtxMenuCreate}" InputGestureText="F3"
                      Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource booleanToCollapsedVisibilityConverter}}"
                      Command="{x:Static local:Commands.CreateArchive}" />
            <MenuItem Header="{x:Static s:guiStrings.CtxMenuExtract}" InputGestureText="F4"
                      Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource booleanToCollapsedVisibilityConverter}}"
                      Command="{x:Static local:Commands.ExtractItem}" />
            <MenuItem Header="{x:Static s:guiStrings.CtxMenuSelectByMask}"
                      Command="{x:Static local:Commands.AddSelection}"/>
            <MenuItem Header="{x:Static s:guiStrings.CtxMenuFileType}">
                <MenuItem DataContext="image" Header="{Binding Converter={StaticResource entryTypeConverter}}"
                          Command="{x:Static local:Commands.SetFileType}" CommandParameter="{Binding}"/>
                <MenuItem DataContext="audio" Header="{Binding Converter={StaticResource entryTypeConverter}}"
                          Command="{x:Static local:Commands.SetFileType}" CommandParameter="{Binding}"/>
                <MenuItem DataContext="script" Header="{Binding Converter={StaticResource entryTypeConverter}}"
                          Command="{x:Static local:Commands.SetFileType}" CommandParameter="{Binding}"/>
                <MenuItem DataContext="video" Header="{Binding Converter={StaticResource entryTypeConverter}}"
                          Command="{x:Static local:Commands.SetFileType}" CommandParameter="{Binding}"/>
                <MenuItem Header="{x:Static s:guiStrings.Type_NONE}"
                          Command="{x:Static local:Commands.SetFileType}" CommandParameter=""/>
            </MenuItem>
            <MenuItem Header="{x:Static s:guiStrings.CtxMenuExplorer}" InputGestureText="Ctrl+E"
                      Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource booleanToCollapsedVisibilityConverter}}"
                      Command="{x:Static local:Commands.ExploreItem}"/>
            <MenuItem Header="{x:Static s:guiStrings.CtxMenuDelete}" InputGestureText="Del"
                      Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource booleanToCollapsedVisibilityConverter}}"
                      Command="{x:Static local:Commands.DeleteItem}"/>
            <Separator/>
            <!--
            <MenuItem Header="{x:Static s:guiStrings.CtxMenuRename}" InputGestureText="F2"
                      Command="{x:Static local:Commands.RenameItem}"/>
            -->
            <MenuItem Header="{x:Static s:guiStrings.CtxMenuRefresh}" InputGestureText="F5"
                      Command="{x:Static local:Commands.Refresh}"/>
            <MenuItem Header="{x:Static s:guiStrings.CtxMenuConvert}" InputGestureText="F6"
                      Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource booleanToCollapsedVisibilityConverter}}"
                      Command="{x:Static local:Commands.ConvertMedia}" />
        </ContextMenu>

        <!-- Media Control Button Style -->
        <Style x:Key="MediaControlButton" TargetType="Button">
            <Setter Property="Width" Value="30"/>
            <Setter Property="Height" Value="30"/>
            <Setter Property="Margin" Value="2"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    </Window.Resources>
    <DockPanel LastChildFill="True">
        <StackPanel x:Name="MainMenuBar" DockPanel.Dock="Top" Orientation="Vertical"
                    Visibility="{Binding Source={x:Static p:Settings.Default}, Path=winMenuBarVisibility, Mode=TwoWay}">
            <Menu IsMainMenu="True" Background="{DynamicResource {x:Static SystemColors.MenuBrushKey}}">
                <MenuItem Header="{x:Static s:guiStrings.MenuFile}">
                    <MenuItem Header="{x:Static s:guiStrings.MenuOpen}" Command="{x:Static local:Commands.OpenFile}" InputGestureText="Ctrl+O"/>
                    <MenuItem Header="{x:Static s:guiStrings.CtxMenuCreate}" InputGestureText="F3"
                              Command="{x:Static local:Commands.CreateArchive}" />
                    <MenuItem Header="{x:Static s:guiStrings.CtxMenuConvert}" InputGestureText="F6"
                              Command="{x:Static local:Commands.ConvertMedia}" />
                    <MenuItem Header="{x:Static s:guiStrings.MenuRecent}" x:Name="RecentFilesMenu">
                        <MenuItem.ItemContainerStyle>
                            <Style TargetType="MenuItem">
                                <Setter Property="Header" Value="{Binding Path=Item2}"/>
                                <Setter Property="Command" Value="{x:Static local:Commands.OpenRecent}"/>
                                <Setter Property="CommandParameter" Value="{Binding Path=Item1}"/>
                            </Style>
                        </MenuItem.ItemContainerStyle>
                    </MenuItem>
                    <Separator/>
                    <MenuItem Header="{x:Static s:guiStrings.MenuExit}" Command="{x:Static local:Commands.Exit}" InputGestureText="Ctrl+Q"/>
                </MenuItem>
                <MenuItem Header="{x:Static s:guiStrings.MenuView}">
                    <MenuItem Header="{x:Static s:guiStrings.MenuPreferences}" InputGestureText="Ctrl+P"
                              Command="{x:Static local:Commands.Preferences}"/>
                    <Separator/>
                    <MenuItem x:Name="FitWindowMenuItem"
                              Header="{x:Static s:guiStrings.MenuFitWindow}" 
                              InputGestureText="Ctrl+H"
                              Command="{x:Static local:Commands.FitWindow}"
                              IsCheckable="True"/>
                    <MenuItem Header="{x:Static s:guiStrings.CtxMenuRefresh}" InputGestureText="F5"
                          Command="{x:Static local:Commands.Refresh}"/>
                    <Separator/>
                    <MenuItem Header="{x:Static s:guiStrings.MenuToggleToolBar}" InputGestureText="Alt+Shift+T"
                          Command="{x:Static local:Commands.HideToolBar}"/>
                    <MenuItem Header="{x:Static s:guiStrings.MenuToggleMenuBar}" InputGestureText="Alt+Shift+M"
                          Command="{x:Static local:Commands.HideMenuBar}"/>
                    <MenuItem Header="{x:Static s:guiStrings.MenuToggleStatusBar}" InputGestureText="Alt+Shift+S"
                          Command="{x:Static local:Commands.HideStatusBar}"/>
                    <Separator/>
                    <StaticResource ResourceKey="sortByMenu"/>
                </MenuItem>
                <MenuItem Header="{x:Static s:guiStrings.MenuHelp}">
                    <MenuItem Header="{x:Static s:guiStrings.MenuAbout}" Command="{x:Static local:Commands.About}"/>
                    <!--MenuItem Header="Troubleshooting..." Command="{x:Static local:Commands.TroubleShooting}"/-->
                    <!--MenuItem Header="{x:Static s:guiStrings.MenuCheckUpdates}" Command="{x:Static local:Commands.CheckUpdates}"/-->
                </MenuItem>
            </Menu>
            <Separator Height="1" Margin="0"/>
        </StackPanel>
        <Menu Visibility="Collapsed" x:Name="HelperMenuBar"/>
        <DockPanel x:Name="MainToolBar" Background="{Binding Path=Background, ElementName=HelperMenuBar}"
                   HorizontalAlignment="Stretch" DockPanel.Dock="Top"
                   Visibility="{Binding Source={x:Static p:Settings.Default}, Path=winToolBarVisibility, Mode=TwoWay}">
            <DockPanel.Resources>
                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}">
                    <Setter Property="ToolTipService.ShowOnDisabled" Value="True"/>
                    <Setter Property="Focusable" Value="False"/>
                    <Setter Property="Margin" Value="1,2,1,2"/>
                </Style>
                <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}">
                    <Setter Property="ToolTipService.ShowOnDisabled" Value="True"/>
                    <Setter Property="Focusable" Value="False"/>
                    <Setter Property="Margin" Value="2,2,2,2"/>
                </Style>
                <Style TargetType="{x:Type Separator}" BasedOn="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}">
                    <Setter Property="Margin" Value="5,0,5,0"/>
                </Style>
                <!-- Path input textbox mouseover highlight -->
                <Style TargetType="{x:Type local:ExtAutoCompleteBox}">
                    <Setter Property="Background" Value="White"/>
                    <Style.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <!--Condition Property="IsTextBoxFocused" Value="False"/-->
                                <Condition Property="IsMouseOver" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{StaticResource InactiveInputBackground}"/>
                        </MultiTrigger>
                    </Style.Triggers>
                </Style>
                <Style TargetType="{x:Type Image}">
                    <Setter Property="UseLayoutRounding" Value="True"/>
                    <Setter Property="SnapsToDevicePixels" Value="True"/>
                    <Setter Property="Width" Value="24"/>
                    <Setter Property="Height" Value="24"/>
                    <Setter Property="Stretch" Value="Uniform"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Button}, AncestorLevel=1}, Path=IsEnabled}" Value="False">
                            <Setter Property="Opacity" Value="0.33"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </DockPanel.Resources>
            <Separator DockPanel.Dock="Bottom" Height="1" Margin="0"/>
            <Button x:Name="ButtonBack" ToolTip="{x:Static s:guiStrings.TooltipBack}" Margin="5,2,0,2"
                    Command="{x:Static local:Commands.GoBack}">
                <Viewbox Width="30" Height="30">
                    <Viewbox.Style>
                        <Style TargetType="Viewbox">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=IsEnabled}" Value="False">
                                    <Setter Property="Opacity" Value="0.4"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Viewbox.Style>
                    <Canvas Width="30" Height="30">
                        <Ellipse Width="30" Height="30" Fill="#4A90E2"/>
                        <Path Data="m 17.5 9.5 l -5.5 5.5 l 5.5 5.5 l -1.5 1.5 l -7 -7 l 7 -7 z" 
                              Stroke="White" StrokeThickness="2" Fill="White" 
                              StrokeLineJoin="Round" StrokeEndLineCap="Round" StrokeStartLineCap="Round"/>
                    </Canvas>
                </Viewbox>
            </Button>
            <Button x:Name="ButtonForward" ToolTip="{x:Static s:guiStrings.TooltipForward}"
                    Command="{x:Static local:Commands.GoForward}">
                <Viewbox Width="30" Height="30">
                    <Viewbox.Style>
                        <Style TargetType="Viewbox">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=IsEnabled}" Value="False">
                                    <Setter Property="Opacity" Value="0.4"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Viewbox.Style>
                    <Canvas Width="30" Height="30">
                        <Ellipse Width="30" Height="30" Fill="#4A90E2"/>
                        <Path Data="m 12.5 9.5 l 5.5 5.5 l -5.5 5.5 l 1.5 1.5 l 7 -7 l -7 -7 z" 
                              Stroke="White" StrokeThickness="2" Fill="White" 
                              StrokeLineJoin="Round" StrokeEndLineCap="Round" StrokeStartLineCap="Round"/>
                    </Canvas>
                </Viewbox>
            </Button>
            <Separator/>
            <StackPanel Orientation="Horizontal" x:Name="PathWidget">
                <local:ExtAutoCompleteBox x:Name="pathLine" Height="22" Width="100" Margin="0" BorderThickness="1,1,0,1"/>
                <Button ToolTip="{x:Static s:guiStrings.CtxMenuRefresh}" Height="22" Width="22" Margin="0"
                        Background="{Binding ElementName=pathLine, Path=Background}"
                        BorderBrush="{Binding ElementName=pathLine, Path=BorderBrush}" BorderThickness="1"
                        Command="{x:Static local:Commands.Refresh}">
                    <Viewbox Width="16" Height="16">
                        <Canvas Width="24" Height="24">
                            <Ellipse Width="24" Height="24" Fill="#4A90E2"/>
                            <Path Data="M 12 6 A 6 6 0 1 1 6 12 L 8 12 A 4 4 0 1 0 12 8 L 12 6 M 6 12 L 4 12 L 7 7 L 10 12 L 6 12" 
                                  Fill="White" StrokeThickness="0"/>
                        </Canvas>
                    </Viewbox>
                </Button>
            </StackPanel>
            <StackPanel Orientation="Horizontal" x:Name="EncodingWidget" Visibility="{Binding ElementName=TextView, Path=Visibility}">
                <Separator/>
                <TextBlock Text="{x:Static s:guiStrings.LabelEncoding}" VerticalAlignment="Center" Margin="5,0,5,0"/>
                <ComboBox x:Name="EncodingChoice" IsEditable="False" Height="22" DisplayMemberPath="EncodingName"
                          ItemsSource="{Binding ElementName=AppWindow, Path=TextEncodings}"
                          SelectedValue="{Binding Source={x:Static p:Settings.Default}, Path=appTextEncoding, Mode=TwoWay}"
                          SelectedValuePath="CodePage" SelectionChanged="OnEncodingSelect"/>
                <Separator/>
            </StackPanel>

            <!-- Unified Media Controls -->
            <StackPanel x:Name="MediaControlPanel" Orientation="Horizontal" Visibility="Collapsed">
                <Separator/>
                <Button x:Name="MediaStopButton" Style="{StaticResource MediaControlButton}"
                        Command="{x:Static local:Commands.StopPlayback}"
                        ToolTip="{x:Static s:guiStrings.TooltipStop}">
                    <Viewbox Width="30" Height="30">
                        <Viewbox.Style>
                            <Style TargetType="Viewbox">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=IsEnabled}" Value="False">
                                        <Setter Property="Opacity" Value="0.4"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Viewbox.Style>
                        <Canvas Width="30" Height="30">
                            <Ellipse Width="30" Height="30" Fill="#FF9999"/>
                            <Rectangle Width="10" Height="10" Fill="White" 
                                      Canvas.Left="10" Canvas.Top="10"/>
                        </Canvas>
                    </Viewbox>
                </Button>
                <Button x:Name="MediaPauseButton" Style="{StaticResource MediaControlButton}"
                        Command="{x:Static local:Commands.PausePlayback}"
                        ToolTip="{x:Static s:guiStrings.TooltipPause}">
                    <Viewbox Width="30" Height="30">
                        <Viewbox.Style>
                            <Style TargetType="Viewbox">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=IsEnabled}" Value="False">
                                        <Setter Property="Opacity" Value="0.4"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Viewbox.Style>
                        <Canvas Width="30" Height="30">
                            <Ellipse Width="30" Height="30" Fill="#F39C12"/>
                            <Path x:Name="MediaPauseIcon" Fill="White" 
                                  Data="M 10 10 L 10 20 L 13 20 L 13 10 Z M 17 10 L 17 20 L 20 20 L 20 10 Z"/>
                        </Canvas>
                    </Viewbox>
                </Button>
                <Button x:Name="MediaCycleButton" Style="{StaticResource MediaControlButton}"
                        Command="{x:Static local:Commands.CyclePlayback}"
                        ToolTip="{x:Static s:guiStrings.TooltipCycleOff}"
                        Visibility="Collapsed">
                    <Viewbox Width="30" Height="30">
                        <Viewbox.Style>
                            <Style TargetType="Viewbox">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=IsEnabled}" Value="False">
                                        <Setter Property="Opacity" Value="0.4"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Viewbox.Style>
                        <Canvas Width="30" Height="30">
                            <Ellipse Width="30" Height="30" Fill="#9B59B6"/>
                            <Path x:Name="MediaCycleIcon" Fill="White" 
                                  Data="M11 13V10.5C11 9 12 8 13.474 7.673l2.973.031C18 8 19 9 19 10.5V12h1.5L18 15l-2.5-3H17V10.5c0-.5-.5-1-1-1H14c-.5 0-1 .5-1 1V13m6 4v2.5C19 21 18 22 16.5 22h-3C12 22 11 21 11 19.5V18H9.5L12 15l2.5 3H13v1.5c0 .5.5 1 1 1h2c.5 0 1-.5 1-1V17"
                                  StrokeThickness="0"/>
                        </Canvas>
                    </Viewbox>
                </Button>
                <Button x:Name="MediaAutoButton" Style="{StaticResource MediaControlButton}"
                        Command="{x:Static local:Commands.AutoPlayback}"
                        ToolTip="{x:Static s:guiStrings.TooltipAutoOff}"
                        Visibility="Collapsed">
                    <Viewbox Width="30" Height="30">
                        <Viewbox.Style>
                            <Style TargetType="Viewbox">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=IsEnabled}" Value="False">
                                        <Setter Property="Opacity" Value="0.4"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Viewbox.Style>
                        <Canvas Width="30" Height="30">
                            <Ellipse Width="30" Height="30" Fill="#27AE60"/>
                            <Path x:Name="MediaAutoIcon" Fill="White" 
                                  Data="M 9 10.5 L 15 10.5 L 15 12.5 L 9 12.5 Z M 9 14 L 15 14 L 15 16 L 9 16 Z M 9 17.5 L 15 17.5 L 15 19.5 L 9 19.5 Z M 17 10 L 23 15 L 17 20 L 17 17 L 20 15 L 17 13 Z"
                                  StrokeThickness="0"/>
                        </Canvas>
                    </Viewbox>
                </Button>
               <Separator/>
               <TextBlock Text="🔊" VerticalAlignment="Center" Margin="5,0,2,0"/>
               <Slider x:Name="MediaVolumeSlider" 
                       Width="80" 
                       Minimum="0" 
                       Maximum="1" 
                       Value="0.8"
                       VerticalAlignment="Center"
                       ToolTip="{x:Static s:guiStrings.TooltipVolume}"
                       ValueChanged="MediaVolumeSlider_ValueChanged"/>
                <Separator/>
            </StackPanel>

            <Button ToolTip="{x:Static s:guiStrings.MenuAbout}" DockPanel.Dock="Right" Margin="0,2,10,2"
                    Command="{x:Static local:Commands.About}">
                <Viewbox Width="32" Height="32">
                    <Canvas Width="32" Height="32">
                        <Ellipse Width="32" Height="32" Fill="#4A90E2"/>
                        <Path Data="M 16 8 C 13.2 8 11 10.2 11 13 L 13.5 13 C 13.5 11.6 14.6 10.5 16 10.5 C 17.4 10.5 18.5 11.6 18.5 13 C 18.5 14.4 17.4 15.5 16 15.5 C 15.2 15.5 14.5 16.2 14.5 17 L 14.5 18 L 17.5 18 L 17.5 17.2 C 19.5 16.5 21 14.5 21 12 C 21 9 19 8 16 8 Z M 14.5 20 L 17.5 20 L 17.5 23 L 14.5 23 Z" 
                              Fill="White" StrokeThickness="0"/>
                    </Canvas>
                </Viewbox>
            </Button>
            <TextBlock Visibility="Hidden"/>
        </DockPanel>
        <StackPanel DockPanel.Dock="Bottom" x:Name="AppStatusBar"
                    Visibility="{Binding Source={x:Static p:Settings.Default}, Path=winStatusBarVisibility, Mode=TwoWay}">
            <Separator Height="1" Margin="0"/>
            <StatusBar>
                <StatusBarItem Width="{Binding ElementName=CurrentDirectory, Path=ActualWidth}">
                    <TextBlock x:Name="appFileStatus"/>
                </StatusBarItem>
                <Separator Width="1"/>
                <StatusBarItem>
                    <TextBlock x:Name="appPreviewStatus"/>
                </StatusBarItem>
            </StatusBar>
        </StackPanel>
        <Grid x:Name="ContentGrid" DockPanel.Dock="Left" VerticalAlignment="Stretch"
              HorizontalAlignment="Stretch" ShowGridLines="False">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Source={x:Static p:Settings.Default}, Path=lvPanelWidth, Mode=TwoWay}" MinWidth="200" />
                <ColumnDefinition Width="1"/>
                <ColumnDefinition Width="*" MinWidth="100"/>
            </Grid.ColumnDefinitions>
            <local:ListViewEx x:Name="CurrentDirectory" Grid.Column="0" BorderThickness="0"
                    ItemsSource="{Binding Source={StaticResource ListViewSource}}"
                    VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                    BorderBrush="Transparent" SelectedValuePath="Name"
                    SelectionMode="Extended" Foreground="Black" AlternationCount="2"
                    ContextMenu="{StaticResource lvDirContextMenu}"
                    PreviewTextInput="lv_TextInput" IsSynchronizedWithCurrentItem="True"
                    PreviewKeyDown="lv_KeyDown"
                    SelectionChanged="lv_SelectionChanged"
                    GridViewColumnHeader.Click="lv_ColumnHeaderClicked">
                <ListView.Resources>
                    <SolidColorBrush x:Key="ItemInactiveBackground" Color="#ffcbcbcb" />
                </ListView.Resources>
                <ListView.InputBindings>
                    <KeyBinding Key="Enter" Command="{x:Static local:Commands.OpenItem}"/>
                    <KeyBinding Gesture="Ctrl+E" Command="{x:Static local:Commands.ExploreItem}"/>
                    <KeyBinding Gesture="F2" Command="{x:Static local:Commands.RenameItem}"/>
                    <KeyBinding Gesture="Space" Command="{x:Static local:Commands.NextItem}"/>
                    <KeyBinding Gesture="Ctrl+Insert" Command="{x:Static local:Commands.CopyNames}"/>
                    <KeyBinding Gesture="Ctrl+PageDown" Command="{x:Static local:Commands.Descend}"/>
                    <KeyBinding Gesture="Ctrl+PageUp" Command="{x:Static local:Commands.Ascend}"/>
                    <MouseBinding Gesture="LeftDoubleClick" Command="{x:Static local:Commands.OpenItem}" />
                </ListView.InputBindings>
                <ListView.ItemContainerStyle>
                    <Style TargetType="ListViewItem">
                        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                        <EventSetter Event="ListViewItem.MouseDoubleClick" Handler="lvi_DoubleClick" />
                        <Style.Triggers>
                            <!-- BEGIN alternate row color -->
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="False" />
                                    <Condition Property="IsMouseOver" Value="False" />
                                    <Condition Property="ItemsControl.AlternationIndex" Value="0"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" Value="{StaticResource AlternateColor1}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="False" />
                                    <Condition Property="IsMouseOver" Value="False" />
                                    <Condition Property="ItemsControl.AlternationIndex" Value="1"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" Value="{StaticResource AlternateColor2}"/>
                            </MultiTrigger>
                            <!-- END alternate row color -->
                        </Style.Triggers>
                    </Style>
                </ListView.ItemContainerStyle>
                <ListView.View>
                    <GridView AllowsColumnReorder="False">
                        <GridViewColumn HeaderContainerStyle="{StaticResource HeaderLeftAlign}" Width="{Binding Source={x:Static p:Settings.Default}, Path=lvNameColumnWidth, Mode=TwoWay}" HeaderTemplate="{StaticResource SortArrowNone}">
                            <GridViewColumn.Header>
                                <GridViewColumnHeader Tag="Name" Content="{x:Static s:guiStrings.HeaderName}"/>
                            </GridViewColumn.Header>
                            <GridViewColumn.CellTemplate>
                                <DataTemplate><TextBlock x:Name="item_Name" Text="{Binding Path=Name}"/></DataTemplate>
                            </GridViewColumn.CellTemplate>
                        </GridViewColumn>
                        <GridViewColumn HeaderContainerStyle="{StaticResource HeaderLeftAlign}" Width="{Binding Source={x:Static p:Settings.Default}, Path=lvTypeColumnWidth, Mode=TwoWay}" HeaderTemplate="{StaticResource SortArrowNone}" DisplayMemberBinding="{Binding Path=Type, Mode=OneWay, Converter={StaticResource entryTypeConverter}}">
                            <GridViewColumn.Header>
                                <GridViewColumnHeader Tag="Type" Content="{x:Static s:guiStrings.HeaderType}"/>
                            </GridViewColumn.Header>
                        </GridViewColumn>
                        <GridViewColumn HeaderContainerStyle="{StaticResource HeaderLeftAlign}" Width="{Binding Source={x:Static p:Settings.Default}, Path=lvSizeColumnWidth, Mode=TwoWay}" HeaderTemplate="{StaticResource SortArrowNone}">
                            <GridViewColumn.Header>
                                <GridViewColumnHeader Tag="Size" Content="{x:Static s:guiStrings.HeaderSize}"/>
                            </GridViewColumn.Header>
                            <GridViewColumn.CellTemplate>
                                <DataTemplate><TextBlock Text="{Binding Path=Size}" TextAlignment="Right"/></DataTemplate>
                            </GridViewColumn.CellTemplate>
                        </GridViewColumn>
                    </GridView>
                </ListView.View>
            </local:ListViewEx>
            <Border x:Name="FilterInputBorder" Grid.Column="0" VerticalAlignment="Bottom" 
                    Background="White"
                    Visibility="Collapsed" Panel.ZIndex="10"
                    Margin="{Binding ElementName=CurrentDirectory, Path=Tag, Mode=OneWay}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <!-- Separator -->
                    <Rectangle Grid.Row="0" Height="1" 
                               Stroke="#CCCCCC" 
                               StrokeDashArray="3,3" 
                               SnapsToDevicePixels="True"/>
                    <!-- Filter input area -->
                    <Grid Grid.Row="1">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <TextBox x:Name="FilterInput" Grid.Column="0" 
                                 Padding="5,3" BorderThickness="0"
                                 VerticalContentAlignment="Center"
                                 TextChanged="FilterInput_TextChanged"
                                 LostFocus="FilterInput_LostFocus"
                                 KeyDown="FilterInput_KeyDown"/>
                        <Button x:Name="ClearFilterButton" Grid.Column="1" 
                                Content="✕" Width="30" 
                                Background="Transparent" BorderThickness="0"
                                Click="ClearFilterButton_Click"
                                Focusable="False"
                                Padding="0" Margin="0">
                            <Button.Style>
                                <Style TargetType="Button">
                                    <Setter Property="FontSize" Value="14"/>
                                    <Setter Property="Foreground" Value="#666666"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="Button">
                                                <Border Background="{TemplateBinding Background}"
                                                        BorderBrush="{TemplateBinding BorderBrush}"
                                                        BorderThickness="{TemplateBinding BorderThickness}">
                                                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                </Border>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Background" Value="#E0E0E0"/>
                                            <Setter Property="Foreground" Value="#000000"/>
                                            <Setter Property="FontWeight" Value="Bold"/>
                                            <Setter Property="FontSize" Value="16"/>
                                        </Trigger>
                                        <Trigger Property="IsPressed" Value="True">
                                            <Setter Property="Background" Value="#D0D0D0"/>
                                            <Setter Property="Foreground" Value="#FF0000"/>
                                            <Setter Property="FontWeight" Value="Bold"/>
                                            <Setter Property="FontSize" Value="16"/>
                                        </Trigger>
                                        <Trigger Property="IsFocused" Value="True">
                                            <Setter Property="Background" Value="#E8E8E8"/>
                                            <Setter Property="Foreground" Value="#000000"/>
                                            <Setter Property="FontWeight" Value="Bold"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>
                    </Grid>
                </Grid>
            </Border>
            <Grid Grid.Column="2" Name="PreviewPane" SnapsToDevicePixels="True">
                <ScrollViewer Name="ImageView" Background="LightGray" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto"
                              SizeChanged="PreviewSizeChanged">
                    <Image Name="ImageCanvas" Stretch="None" UseLayoutRounding="True" SnapsToDevicePixels="True"
                           local:TouchScrolling.IsEnabled="True" RenderOptions.BitmapScalingMode="NearestNeighbor"
                           Cursor="Hand" local:TouchScrolling.DraggingCursor="Hand" />
                </ScrollViewer>
                <jv:TextViewer x:Name="TextView" Visibility="Collapsed" BorderThickness="1,0,0,0" BorderBrush="Black"/>
            </Grid>
            <!-- Margin and BorderThickness help to react early on mouse pointer -->
            <GridSplitter Grid.Column="1" Background="Black" ShowsPreview="False" Focusable="False"
                          Margin="-3,0" BorderThickness="3,0" BorderBrush="Transparent"
                          HorizontalAlignment="Center" VerticalAlignment="Stretch" />
        </Grid>
    </DockPanel>
    <Window.InputBindings>
        <KeyBinding Gesture="Ctrl+O" Command="{x:Static local:Commands.OpenFile}"/>
        <KeyBinding Gesture="Ctrl+Q" Command="{x:Static local:Commands.Exit}"/>
        <KeyBinding Gesture="Ctrl+H" Command="{x:Static local:Commands.FitWindow}"/>
        <KeyBinding Gesture="Ctrl+A" Command="{x:Static local:Commands.SelectAll}"/>
        <KeyBinding Gesture="Ctrl+P" Command="{x:Static local:Commands.Preferences}"/>
        <KeyBinding Gesture="Ctrl+S" Command="{x:Static local:Commands.ScaleImage}"/>
        <KeyBinding Gesture="Backspace" Command="{x:Static local:Commands.GoBack}"/>
        <KeyBinding Gesture="Alt+Left" Command="{x:Static local:Commands.GoBack}"/>
        <KeyBinding Gesture="Alt+Right" Command="{x:Static local:Commands.GoForward}"/>
        <KeyBinding Gesture="Alt+Shift+M" Command="{x:Static local:Commands.HideMenuBar}"/>
        <KeyBinding Gesture="Alt+Shift+T" Command="{x:Static local:Commands.HideToolBar}"/>
        <KeyBinding Gesture="Alt+Shift+S" Command="{x:Static local:Commands.HideStatusBar}"/>
        <KeyBinding Gesture="F3" Command="{x:Static local:Commands.CreateArchive}"/>
        <KeyBinding Gesture="F4" Command="{x:Static local:Commands.ExtractItem}"/>
        <KeyBinding Gesture="F5" Command="{x:Static local:Commands.Refresh}"/>
        <KeyBinding Gesture="F6" Command="{x:Static local:Commands.ConvertMedia}"/>
        <KeyBinding Gesture="Delete" Command="{x:Static local:Commands.DeleteItem}"/>
        <KeyBinding Gesture="Add" Command="{x:Static local:Commands.AddSelection}"/>
        <KeyBinding Gesture="Space" Command="{x:Static local:Commands.NextItem}"/>
    </Window.InputBindings>
    <Window.CommandBindings>
        <CommandBinding Command="{x:Static local:Commands.OpenItem}"   Executed="OpenItemExec"   CanExecute="CanExecuteOnSelected"/>
        <CommandBinding Command="{x:Static local:Commands.OpenFile}"   Executed="OpenFileExec"   CanExecute="CanExecuteAlways"/>
        <CommandBinding Command="{x:Static local:Commands.OpenRecent}" Executed="OpenRecentExec" CanExecute="CanExecuteAlways"/>
        <CommandBinding Command="{x:Static local:Commands.AddSelection}" Executed="AddSelectionExec" CanExecute="CanExecuteAlways"/>
        <CommandBinding Command="{x:Static local:Commands.SelectAll}"  Executed="SelectAllExec" CanExecute="CanExecuteAlways"/>
        <CommandBinding Command="{x:Static local:Commands.CopyNames}"  Executed="CopyNamesExec" CanExecute="CanExecuteAlways"/>
        <CommandBinding Command="{x:Static local:Commands.NextItem}"  Executed="NextItemExec" CanExecute="CanExecuteAlways"/>
        <CommandBinding Command="{x:Static local:Commands.ExtractItem}" Executed="ExtractItemExec"   CanExecute="CanExecuteExtract"/>
        <CommandBinding Command="{x:Static local:Commands.CreateArchive}" Executed="CreateArchiveExec" CanExecute="CanExecuteCreateArchive"/>
        <CommandBinding Command="{x:Static local:Commands.DeleteItem}" Executed="DeleteItemExec" CanExecute="CanExecuteOnPhysicalFile" />
        <CommandBinding Command="{x:Static local:Commands.RenameItem}" Executed="RenameItemExec" CanExecute="CanExecuteInDirectory" />
        <CommandBinding Command="{x:Static local:Commands.ExploreItem}" Executed="ExploreItemExec" CanExecute="CanExecuteInDirectory" />
        <CommandBinding Command="{x:Static local:Commands.ConvertMedia}" Executed="ConvertMediaExec" CanExecute="CanExecuteConvertMedia" />
        <CommandBinding Command="{x:Static local:Commands.SortBy}"     Executed="SortByExec"     CanExecute="CanExecuteAlways"/>
        <CommandBinding Command="{x:Static local:Commands.SetFileType}" Executed="SetFileTypeExec"     CanExecute="CanExecuteOnSelected"/>
        <CommandBinding Command="{x:Static local:Commands.GoBack}"     Executed="GoBackExec"     CanExecute="CanExecuteGoBack"/>
        <CommandBinding Command="{x:Static local:Commands.GoForward}"  Executed="GoForwardExec"  CanExecute="CanExecuteGoForward"/>
        <CommandBinding Command="{x:Static local:Commands.Refresh}"    Executed="RefreshExec"    CanExecute="CanExecuteAlways"/>
        <CommandBinding Command="{x:Static local:Commands.FitWindow}"  Executed="FitWindowExec"  CanExecute="CanExecuteFitWindow"/>
        <CommandBinding Command="{x:Static local:Commands.HideStatusBar}" Executed="HideStatusBarExec" CanExecute="CanExecuteAlways"/>
        <CommandBinding Command="{x:Static local:Commands.HideMenuBar}" Executed="HideMenuBarExec" CanExecute="CanExecuteAlways"/>
        <CommandBinding Command="{x:Static local:Commands.HideToolBar}" Executed="HideToolBarExec" CanExecute="CanExecuteAlways"/>
        <CommandBinding Command="{x:Static local:Commands.About}"      Executed="AboutExec"      CanExecute="CanExecuteAlways"/>
        <CommandBinding Command="{x:Static local:Commands.CheckUpdates}" Executed="CheckUpdatesExec" CanExecute="CanExecuteUpdate"/>
        <CommandBinding Command="{x:Static local:Commands.StopPlayback}" Executed="StopPlaybackExec" CanExecute="CanExecutePlaybackControl"/>
        <CommandBinding Command="{x:Static local:Commands.PausePlayback}" Executed="PausePlaybackExec" CanExecute="CanExecutePlaybackControl"/>
        <CommandBinding Command="{x:Static local:Commands.CyclePlayback}" Executed="CyclePlaybackExec" CanExecute="CanExecutePlaybackControl"/>
        <CommandBinding Command="{x:Static local:Commands.AutoPlayback}" Executed="AutoPlaybackExec" CanExecute="CanExecutePlaybackControl"/>
        <CommandBinding Command="{x:Static local:Commands.Preferences}" Executed="PreferencesExec" CanExecute="CanExecuteAlways"/>
        <CommandBinding Command="{x:Static local:Commands.ScaleImage}"  Executed="ScaleImageExec" CanExecute="CanExecuteScaleImage"/>
        <CommandBinding Command="{x:Static local:Commands.TroubleShooting}" Executed="TroubleShootingExec" CanExecute="CanExecuteAlways"/>
        <CommandBinding Command="{x:Static local:Commands.Descend}"     Executed="DescendExec" CanExecute="CanExecuteAlways"/>
        <CommandBinding Command="{x:Static local:Commands.Ascend}"      Executed="AscendExec" CanExecute="CanExecuteAlways"/>
        <CommandBinding Command="{x:Static local:Commands.Exit}"       Executed="ExitExec"       CanExecute="CanExecuteAlways"/>
    </Window.CommandBindings>
</Window>
